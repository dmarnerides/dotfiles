"Manage Plug Installation
let data_dir = '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

set termguicolors
colorscheme my_nvcode

call plug#begin()

" Text objects for () {} []
Plug 'wellle/targets.vim'

" Allows repeating of plugin commands using .
Plug 'tpope/vim-repeat'

" Surround stuff with stuff
Plug 'machakann/vim-sandwich'

" Comment / uncomment
Plug 'preservim/nerdcommenter'

" Moving between vim and tmux panes
Plug 'christoomey/vim-tmux-navigator'

" Smooth scrolling
Plug 'yuttie/comfortable-motion.vim'

" Don't close windows that also display buffer when using bdel
Plug 'rbgrouleff/bclose.vim'

" Enhance % button functionality
Plug 'tmhedberg/matchit'

" Search and replace!
Plug 'brooth/far.vim'

" Vim sugar for the UNIX shell commands that need it the most (e.g. :Delete)
Plug 'tpope/vim-eunuch'

" search current selection with * and #
Plug 'nelstrom/vim-visual-star-search'

" Latex support
" Plug 'https://github.com/lervag/vimtex.git'

" CSV Files
" Plug 'chrisbra/csv.vim'

" Session saving
Plug 'thaerkh/vim-workspace'

" Dev Icons
Plug 'ryanoasis/vim-devicons'

" Fzf
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
        
" Plyglot
Plug 'sheerun/vim-polyglot'

" CoC
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" " ALE
" Plug 'dense-analysis/ale'

" Airline
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Git stuff
Plug 'tpope/vim-fugitive'

" TMux navigator (Moving between vim and tmux panes)
Plug 'christoomey/vim-tmux-navigator'

call plug#end()



" General settings
set nocompatible
scriptencoding utf-8
set encoding=utf-8  " Encoding
set fileencoding=utf8
set hidden " TextEdit might fail if hidden is not set. (CoC)
set nobackup " Some servers have issues with backup files, see #649. (Coc)
set nowritebackup
set mouse= "
set modelines=1
set noexrc
set secure
set noerrorbells
set novisualbell
set autoread
set switchbuf=useopen
set backspace=indent,eol,start

set updatetime=300 " Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable delays and poor user experience.
set shortmess+=c " Don't pass messages to |ins-completion-menu|.
set signcolumn=yes
set path=.,,,$PWD/**
set fillchars+=vert:\ " KEEP THIS COMMENT HERE, space needed after \

if &history < 1000
  set history=1000
endif


set showmode " show current mode (insert, etc) under the cmdline
set showcmd " show current command under the cmd line
set cmdheight=1 " cmdline height
set laststatus=2 " 2 = always show status line (filename, etc)
set scrolloff=3 " min number of lines to keep between cursor and screen edge
set sidescrolloff=5 " min number of cols to keep between cursor and screen edge
set textwidth=0 " max inserted text width for paste operations
set linespace=0 " font spacing
set ruler " show line,col at the cursor pos
set number " show absolute line no. at the cursor pos
set relativenumber " otherwise, show relative numbers in the ruler
set nocursorline " Don't show a line where the current cursor is
set signcolumn=number " merge signcolumn and number column into one
set nowrap " don't wrap long lines
set nolist
set listchars=eol:↲,nbsp:␣,trail:•,extends:⟩,precedes:⟨,space:␣
" set listchars=eol:↲,tab:→,nbsp:␣,trail:•,extends:⟩,precedes:⟨,space:␣
set showbreak=↪
set completeopt=noinsert,menuone,noselect " show menu even for one item do not auto select/insert
set wildmenu
set wildmode=longest:full,full
set wildignore=*.so,*.pyc,*.png,*.jpg,*.gif,*.jpeg,*.ico,*.pdf,*.wav,*.mp4,*.mp3,*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz,*/.bundle/*,*/.sass-cache/*,*.swp,*~,._*,_pycache_,.DS_Store,.vscode,.localized,*.egg-info/,.cache,node_modules,package-lock.json,yarn.lock,dist,.git,.git/
set shortmess+=c " Don't pass messages to |ins-completion-menu|.

set joinspaces " insert spaces after '.?!' when joining lines
set autoindent " copy indent from current line on newline
set smartindent " add <tab> depending on syntax (C/C++)
set nostartofline " keep cursor column on navigation
set tabstop=4 " Tab indentation levels every two columns
set softtabstop=4 " Tab indentation when mixing tabs & spaces
set shiftwidth=4 " Indent/outdent by two columns
set shiftround " Always indent/outdent to nearest tabstop
set expandtab " Convert all tabs that are typed into spaces
set smarttab " Use shiftwidths at left margin, tabstops everywhere else
set splitbelow " ':new' ':split' below current
set splitright " ':vnew' ':vsplit' right of current
set foldenable " enable folding
set foldlevelstart=10 " open most folds by default
set foldnestmax=10 " 10 nested fold max
set foldmethod=indent " fold based on indent level
set undofile " use an undo file
set hidden " do not unload buffer when abandoned
set noautochdir " do not change dir when opening a file
set magic "  use 'magic' chars in search patterns
set hlsearch " highlight all text matching current search pattern
set incsearch " show search matches as you type
set ignorecase " ignore case on search
set smartcase " case sensitive when search includes uppercase
set showmatch " highlight matching [{()}]
set wrapscan " begin search from top of the file when nothng is found
set cpoptions+=x " stay at seach item when <esc>
set nobackup " no backup file
set nowritebackup " do not backup file before write
set noswapfile " no swap file

set sessionoptions=blank,buffers,curdir,folds,help,tabpages,winsize
set diffopt=internal,filler,algorithm:histogram,indent-heuristic

" Disable some in built plugins completely
let g:loaded_netrw=1
let g:loaded_netrwPlugin=1
let g:loaded_netrwSettings=1
let g:loaded_netrwFileHandlers=1
let g:loaded_gzip=1
let g:loaded_zip=1
let g:loaded_zipPlugin=1
let g:loaded_tar=1
let g:loaded_tarPlugin=1
let g:loaded_getscript=1
let g:loaded_getscriptPlugin=1
let g:loaded_vimball=1
let g:loaded_vimballPlugin=1
let g:loaded_2html_plugin=1
let g:loaded_logipat=1
let g:loaded_rrhelper=1
let g:loaded_spellfile_plugin=1


"
" Mappings
"

" Fix common typos
cnoreabbrev W! w!
cnoreabbrev Q! q!
cnoreabbrev Qa! qa!
cnoreabbrev Qall! qall!
cnoreabbrev Wq wq
cnoreabbrev Wqa wqa
cnoreabbrev Wa wa
cnoreabbrev wQ wq
cnoreabbrev WQ wq
cnoreabbrev W w
cnoreabbrev Q q
cnoreabbrev Qa qa
cnoreabbrev Qall qall
cnoreabbrev Vs vs

" Use # instead of : for commands
nnoremap # :
vnoremap # :


" Use L to go to end of line (last non whitespace)
nnoremap L g_
vnoremap L g_

" Use H to go to start of line (last non whitespace)
nnoremap H ^
vnoremap H ^

" \p pastes after cursor with space added before
nmap <leader>p a<space><C-r>"<esc>

" \P pastes before cursor with space added after
nmap <leader>P i<C-r>"<space><esc>

" Clear search results using leader space
nmap <silent> <leader><space> :noh<cr>

" Buffer changes
nmap <leader>bn :bn<CR>
nmap <F4> :bn<CR>
nmap <leader>bp :bp<CR>
nmap <F3> :bp<CR>
nmap <leader>bb :b#<CR>
nmap <F2> :b#<CR>

" See http://vim.wikia.com/wiki/Recover_from_accidental_Ctrl-U
inoremap <c-u> <c-g>u<c-u>
inoremap <c-w> <c-g>u<c-w>

" Map `Y` to copy to end of line
" conistent with the behaviour of `C` and `D`
nnoremap Y y$
vnoremap Y <Esc>y$gv

" keep visual selection when (de)indenting
vnoremap < <gv
vnoremap > >gv

" Move selected lines up/down in visual mode
xnoremap K :move '<-2<CR>gv=gv
xnoremap J :move '>+1<CR>gv=gv

" Map <leader>o & <leader>O to newline without insert mode
nnoremap <silent> <leader>o :<C-u>call append(line("."), repeat([""], v:count1))<CR>
nnoremap <silent> <leader>O :<C-u>call append(line(".")-1, repeat([""], v:count1))<CR>

"
" Autocommands
"
autocmd BufEnter * setlocal formatoptions-=cro
autocmd CursorHold * silent call CocActionAsync('highlight')

" Python colorize allow
let g:python_highlight_all=1

filetype plugin on

"
" Vim Tmux Navigator
"
let g:tmux_navigator_no_mappings = 1

"
" Far.vim
"
let g:far#enable_undo=1
set lazyredraw            " improve scrolling performance when navigating through large results
set regexpengine=1        " use old regexp engine
set ignorecase smartcase  " ignore case only when the pattern contains no capital letters



"
" CoC
"

let g:coc_global_extensions = [
      \    'coc-cmake',
      \    'coc-css',
      \    'coc-cssmodules',
      \    'coc-eslint',
      \    'coc-git',
      \    'coc-html',
      \    'coc-html-css-support',
      \    'coc-json',
      \    'coc-markdown-preview-enhanced',
      \    'coc-prettier',
      \    'coc-pyright',
      \    'coc-sh',
      \    'coc-yaml',
      \    'coc-sumneko-lua',
      \ ]


" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-space> coc#refresh()
  " inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Run the Code Lens action on the current line.
nmap <leader>cl  <Plug>(coc-codelens-action)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocActionAsync('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

" Airline mappings of CoC
let g:airline#extensions#coc#enabled=1
let g:airline#extensions#coc#error_symbol='Error:'
let g:airline#extensions#coc#warning_symbol='Warning:'
let g:airline#extensions#coc#stl_format_err='%E{[%e(#%fe)]}'
let g:airline#extensions#coc#stl_format_warn='%W{[%w(#%fw)]}'


"
" Fzf
"
let g:fzf_preview_window = ['down:50%:nowrap']

"
" NERDCommenter
"
" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign='left'
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims=1
" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs=1
" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines=1
" Enable NERDCommenterToggle to check all selected lines is commented or not
let g:NERDToggleCheckAllLines=1

"
" vim-workspace
"
let g:workspace_session_directory = $HOME . '/.vim/sessions/'
let g:workspace_undodir= $HOME . '/.vim/undodir/'
let g:workspace_autocreate = 1
let g:workspace_autosave_always = 0
let g:workspace_autosave = 0
let g:workspace_create_new_tabs = 0
let g:workspace_session_disable_on_args = 0

"
" Airline
"
let g:airline_theme='deus'
let g:airline_powerline_fonts=1
let g:airline#extensions#tabline#enabled=1
let g:airline#extensions#tabline#buffer_nr_show=1
let g:airline#extensions#tabline#show_tabs=1
let g:webdevicons_enable_airline_tabline=1
let g:webdevicons_enable_airline_statusline=0
let g:airline#extensions#tabline#formatter='unique_tail_improved'

let g:airline_section_x = ''
let g:airline_section_y = ''

"
" Tmux navigator
"
let g:tmux_navigator_no_mappings=1

